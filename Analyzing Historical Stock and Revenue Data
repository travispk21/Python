# The purpose of this project is to import stock and revenue data from both Tesla and GameStop using Python.
# I visualized this data to compare stock performance with company revenue, highlighting how market behavior can vary between companies.


# Installed the yfinance library, BeautifulSoup, nbformat, and plotly

!pip install yfinance
!pip install bs4
!pip install nbformat
!pip install --upgrade plotly


# Imported the yfinance, pandas, and requests libraries, imported the BeautifulSoup class, and imported Polotly's graph objects module as well as its make_subplots function.
# Also imported Plotly's input/output module and set the default rendering mode.

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

import plotly.io as pio
pio.renderers.default = "iframe"


# Definted the graphing function "make_graph", which will be used to visualize that imported stock and revenue data.

def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()
    from IPython.display import display, HTML
    fig_html = fig.to_html()
    display(HTML(fig_html))


# Extracted Tesla stock information, saved it as a DataFrame, and reset the index to prevent the Date column from being set as the index instead. Then displayed the first five rows to check work.

tsla = yf.Ticker("TSLA")

tesla_data = tsla.history(period="max")

tesla_data.reset_index(inplace=True)
tesla_data.head()


# Downloaded a website containing revenue information for Tesla, saved the text as a variable "html_data", and then parsed the html data.

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url).text

soup = BeautifulSoup(html_data, "html.parser")


# Extracted the table from the website containing Tesla revenue data and stored into a DataFrame.

tesla_revenue = pd.DataFrame(columns=["Date", "Revenue"])

for row in soup.find_all("tbody")[1].find_all("tr"):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text

    tesla_revenue = pd.concat([tesla_revenue, pd.DataFrame({"Date":[date], "Revenue":[revenue]})], ignore_index=True)


# Cleaned the data in the table by removing commas, dollar signs, and null or empty strings in the Revenue column.

tesla_revenue["Revenue"] = tesla_revenue["Revenue"].str.replace('$',"")
tesla_revenue["Revenue"] = tesla_revenue["Revenue"].str.replace(',',"")

tesla_revenue.dropna(inplace=True)
tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]


# Extracted GameStop stock information, saved it as a DataFrame, and reset the index to prevent the Date column from being set as the index instead. Then displayed the first five rows to check work.

gme = yf.Ticker("GME")

gme_data = gme.history(period="max")

gme_data.reset_index(inplace=True)
gme_data.head()


# Downloaded a website containing revenue information for GameStop, saved the text as a variable "html_data_2", and then parsed the html data.
# Extracted the table from the website containing GameStop revenue data and stored into a DataFrame.
# Cleaned the data to remove the commas and dollar signs.

url2 = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
html_data_2 = requests.get(url2).text

soup2 = BeautifulSoup(html_data_2, "html.parser")

gme_revenue = pd.DataFrame(columns=["Date", "Revenue"])

for row in soup2.find_all("tbody")[1].find_all("tr"):
    col = row.find_all("td")
    date = col[0].text
    revenue = col[1].text

    gme_revenue = pd.concat([gme_revenue, pd.DataFrame({"Date":[date], "Revenue":[revenue]})], ignore_index=True)

gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace('$',"")
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',',"")


# Plotted the Tesla Stock and Revenue Data using the "make_graph" function that was previously created.
make_graph(tesla_data, tesla_revenue, 'Tesla')

# Did the same for GameStop
make_graph(gme_data, gme_revenue, 'GameStop')


## Conclusion: Visualizing each company's stock prices versus their revenue highlighted interesting differences between the two companies. The comparison of this data illustrated how market behavior can vary in unexpected ways.
